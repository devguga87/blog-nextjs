{
  "data": {
    "setting": {
      "id": "618a69e6fee5152142f80557",
      "blogName": "React",
      "blogDescription": "Um blog sobre react",
      "logo": null,
      "menuLink": [
        {
          "id": "618a69e7fee5152142f80558",
          "link": "React",
          "text": "react",
          "newTab": false
        },
        {
          "id": "618ab691fee5152142f8055a",
          "link": "fdf",
          "text": "fdf",
          "newTab": true
        }
      ],
      "text": "<p>Rodape</p>"
    },
    "posts": [
      {
        "createdAt": "2020-04-20",
        "id": "61897584828e2e36814d29d1",
        "slug": "usando-o-use-state",
        "title": "Usando o useState",
        "excerpt": "Hooks são uma nova adição no React 16.8. Eles permitem que você use o state e outros recursos do React sem escrever uma classe.",
        "content": "<p><span style=\"color:rgb(0,0,0);\">Este exemplo renderiza um<strong> contador</strong>. Quando você clica no botão, ele incrementa o valor:</span></p><pre><code class=\"language-plaintext\">import React, { useState } from 'react';\n\nfunction Example() {\n  // Declara uma nova variável de state, que chamaremos de \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre><p style=\"margin-left:0px;\">Aqui, <code>useState</code> é um <i>Hook</i> (nós vamos falar sobre o que isso significa em instantes). Nós o chamamos dentro de um componente funcional para adicionar alguns states locais a ele. React irá preservar este state entre re-renderizações. <code>useState</code> retorna um par: o valor do state <i>atual</i> e uma função que permite atualizá-lo. Você pode chamar essa função a partir de um manipulador de evento ou de qualquer outro lugar. É parecido com <code>this.setState</code> em uma classe, exceto que não mescla o antigo state com o novo. (Nós iremos mostrar um exemplo comparando <code>useState</code> com <code>this.state</code> em <a href=\"https://pt-br.reactjs.org/docs/hooks-state.html\">Utilizando o State Hook</a>.)</p><p style=\"margin-left:0px;\">O único argumento para <code>useState</code> é o state inicial. No exemplo acima, é <code>0</code> porque nosso contador começa do zero. Perceba que diferente de <code>this.state</code>, o state não precisa ser um objeto — apesar de que possa ser se você quiser. O argumento de state inicial é utilizado apenas durante a primeira renderização.</p><h4 style=\"margin-left:0px;\">&nbsp;</h4>",
        "allowComments": true,
        "cover": {
          "id": "61897539828e2e36814d29d0",
          "alternativeText": "ancora simbolo react",
          "url": "https://res.cloudinary.com/daprxbkmi/image/upload/v1636398387/hook_cf3f7f168f.jpg"
        },
        "categories": [
          {
            "id": "6189737a828e2e36814d29ca",
            "displayName": "React",
            "slug": "react"
          }
        ],
        "tags": [],
        "author": {
          "id": "618972ca828e2e36814d29c8",
          "displayName": "Gustavo Seabra",
          "slug": "gustavo-seabra"
        }
      },
      {
        "id": "618bb6fe55200c302a30d69c",
        "slug": "utilizando-use-effect",
        "title": "Utilizando use Effect",
        "excerpt": "O Effect Hook (Hook de Efeito) te permite executar efeitos colaterais em componentes funcionais",
        "content": "<p><span style=\"color:rgb(0,0,0);\">Buscar dados, configurar uma subscription, e mudar o DOM manualmente dentro dos componentes React são exemplos de efeitos colaterais. Esteja você acostumado ou não a chamar essas operações de “efeitos colaterais” (ou somente “efeitos”), você provavelmente já usou eles em seus componentes antes.</span></p><pre><code class=\"language-plaintext\">import React, { useState, useEffect } from 'react';\nfunction Exemplo() {\n  const [count, setCount] = useState(0);\n\n  // Similar ao componentDidMount e componentDidUpdate:  useEffect(() =&gt; {    // Atualiza o titulo do documento usando a API do browser    document.title = `Você clicou ${count} vezes`;  });\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Você clicou {count} vezes&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Clique aqui\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre><p style=\"margin-left:0px;\">Em um componente de classe do React, o método <code>render</code> não deve causar efeitos colaterais. Seria muito cedo — nós geralmente queremos executar nossos efeitos <i>depois</i> que o React atualizou a DOM.</p><p style=\"margin-left:0px;\">Isso é o porque nas classes do React, nós colocamos efeitos dentro de <code>componentDidMount</code> e <code>componentDidUpdate</code>. Voltando ao nosso exemplo, aqui está um componente de classe do React chamado contador que atualiza o titulo logo após o React faz as mudanças na DOM</p>",
        "allowComments": true,
        "cover": {
          "id": "61897539828e2e36814d29d0",
          "alternativeText": "ancora simbolo react",
          "url": "https://res.cloudinary.com/daprxbkmi/image/upload/v1636398387/hook_cf3f7f168f.jpg"
        },
        "categories": [
          {
            "id": "6189737a828e2e36814d29ca",
            "displayName": "React",
            "slug": "react"
          }
        ],
        "tags": [],
        "author": {
          "id": "618972ca828e2e36814d29c8",
          "displayName": "Gustavo Seabra",
          "slug": "gustavo-seabra"
        }
      }
    ]
  }
}
